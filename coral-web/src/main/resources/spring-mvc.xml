<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--引入配置属性文件-->
    <context:property-placeholder location="classpath:config.properties"/>

    <!--
        自动扫描controller包下的所有类，如果@Controller注入为bean
        并将bean依赖注入，即dubbo服务端暴露的Service注入到Controller中
    -->
    <dubbo:annotation package="com.dyenigma.controller"/>

    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <mvc:annotation-driven/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
        <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <property name="maxUploadSize">
            <value>5242880</value><!-- 上传文件大小限制为31M，31*1024*1024 -->
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>

    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
    <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">
                    error_fileupload
                </prop>
                <!-- 处理其它异常(包括Controller抛出的) -->
                <prop key="java.lang.Throwable">WEB-INF/500</prop>
            </props>
        </property>
    </bean>

    <mvc:resources mapping="/druid/**" location="/WEB-INF/druid/"/>
    <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/>
    <mvc:resources mapping="/favicon.ico" location="/"/>

    <!-- 验证码生成类 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!--在session中获取code以取得验证码的值 -->
                        <prop key="kaptcha.session.key">code</prop>
                        <!-- 验证码长度 -->
                        <prop key="kaptcha.textproducer.char.length">5</prop>
                        <!-- 图片边框，合法值：yes , no -->
                        <prop key="kaptcha.border">yes</prop>
                        <!-- 边框颜色，合法值： r,g,b (and optional alpha) 或者 white,black,blue. -->
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <!-- 边框厚度，合法值：>0 -->
                        <prop key="kaptcha.border.thickness">1</prop>
                        <!-- 图片实现类 -->
                        <prop key="kaptcha.producer.impl">com.google.code.kaptcha.impl.DefaultKaptcha</prop>
                        <!-- 图片样式，水纹WaterRipple,鱼眼FishEyeGimpy,阴影ShadowGimpy，可以自己继承com.google.code.kaptcha.GimpyEngine自定义样式 -->
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.FishEyeGimpy</prop>
                        <!-- 字体颜色，合法值： r,g,b 或者 white,black,blue. -->
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                        <!-- 字体 -->
                        <prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
                        <!-- 文字间隔 -->
                        <prop key="kaptcha.textproducer.char.space">4</prop>
                        <!-- 文字渲染器 -->
                        <prop key="kaptcha.word.impl">com.google.code.kaptcha.text.impl.DefaultWordRenderer
                        </prop>
                        <!-- 文本集合,验证码值从此集合中获取 -->
                        <prop key="kaptcha.textproducer.char.string">abcde2345678gfynmnpwx</prop>
                        <!-- 文本实现类 -->
                        <prop key="kaptcha.textproducer.impl">com.google.code.kaptcha.text.impl.DefaultTextCreator
                        </prop>
                        <!-- 干扰实现类，可以自己继承com.google.code.kaptcha.NoiseProducer，自定义干扰线 -->
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <!-- 干扰颜色，合法值： r,g,b 或者 white,black,blue. -->
                        <prop key="kaptcha.noise.color">black</prop>
                        <!-- 背景实现类 -->
                        <prop key="kaptcha.background.impl">com.google.code.kaptcha.impl.DefaultBackground
                        </prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>